{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Recipes API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API for managing and sharing culinary recipes."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "User authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User-related endpoints"
    },
    {
      "name": "Categories",
      "description": "Recipe categories endpoints"
    },
    {
      "name": "Ingredients",
      "description": "Recipe ingredients endpoints"
    },
    {
      "name": "Recipes",
      "description": "Endpoints for managing recipes"
    }
  ],
  "paths": {
    "/api/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get my recipes (private)",
        "operationId": "getOwnRecipes",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "createdAt",
                "updatedAt",
                "isFavorite"
              ],
              "default": "createdAt"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Full-text or regex search by title/description"
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            },
            "description": "CSV list; returns recipes that include all tags"
          },
          {
            "in": "query",
            "name": "isFavorite",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            },
            "description": "CSV projection (e.g. title,description,tags)"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "My recipes fetched"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Recipe"
                          }
                        },
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 10
                        },
                        "total": {
                          "type": "integer",
                          "example": 37
                        },
                        "totalPages": {
                          "type": "integer",
                          "example": 4
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "My recipes not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create a new recipe",
        "operationId": "createRecipe",
        "description": "Create a new recipe (private)",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Potato soup"
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary"
                  },
                  "description": {
                    "type": "string",
                    "example": "Delicious potato soup"
                  },
                  "ingredients": {
                    "type": "string",
                    "example": "1 potato, 1 onion, 1 carrot"
                  },
                  "instructions": {
                    "type": "string",
                    "example": "1. Peel and chop the potatoes. 2. Boil the potatoes until tender. 3. Mash the potatoes and add seasoning to taste."
                  },
                  "categoryId": {
                    "type": "string",
                    "example": "64f1a2c3e4b5d6f7a8b9c0d1"
                  },
                  "cookingTime": {
                    "type": "number",
                    "example": 45
                  },
                  "foodEnergy": {
                    "type": "number",
                    "example": 320
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe created successfully",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "recipe": {
                          "type": "object",
                          "$ref": "#/components/schemas/Recipe"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/recipes/{id}": {
  "get": {
    "tags": ["Recipes"],
    "summary": "Get recipe by id",
    "operationId": "getRecipe",
    "description": "Get recipe by id",
    "parameters": [
      {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string",
          "example": "6462a8f74c3d0ddd28897fcd"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Recipe successfully found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["status", "message", "data"],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 200
                },
                "message": {
                  "type": "string",
                  "example": "Successfully found recipe with id 6462a8f74c3d0ddd28897fcd!"
                },
                "data": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          }
        }
      },
      "404": {
        "$ref": "#/components/responses/404"
      }
    },
    "security": [] 
  }
},
    "/api/ingredient": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all ingredients",
        "operationId": "getAllIngredients",
        "description": "Retrieve a list of all available ingredients.",
        "security": [],
        "responses": {
          "200": {
            "description": "List of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "description": "Ingredients not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "operationId": "getAllCategories",
        "description": "Public endpoint. Returns an array of categories.",
        "security": [],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved categories!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "description": "Categories not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register new user",
        "operationId": "register",
        "description": "Register new user",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "User"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "test@test.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "name",
                        "email",
                        "favouriteRecipes",
                        "_id"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "User"
                        },
                        "email": {
                          "type": "string",
                          "example": "test@test.com"
                        },
                        "favouriteRecipes": {
                          "type": "array"
                        },
                        "_id": {
                          "type": "string",
                          "example": "6898ca1b9f0d05aadcb9da53"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "operationId": "login",
        "description": "Login",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "test@test.ua"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "cqPzZEQl8Oyt0/tjTMqQiru5Te+jAHkTB2hm/5Fo"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "description": "Logout",
        "security": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh token",
        "operationId": "refresh",
        "description": "Get fresh token and refresh token for the current user",
        "security": [],
        "responses": {
          "200": {
            "description": "Session refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "cqPzZEQl8Oyt0/tjTMqQiru5Te+jAHkTB2hm/5Fo"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user information",
        "description": "Retrieve information about the currently authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user information!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT authentication scheme"
      }
    },
    "schemas": {
      "Recipe": {
        "type": "object",
        "required": [
          "_id",
          "userId",
          "name",
          "description",
          "ingredients",
          "instructions",
          "categoryId",
          "cookingTime"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "userId": {
            "description": "ID of the user who created the recipe",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the recipe",
            "type": "string",
            "example": "Irish stew",
            "maxLength": 64
          },
          "photo": {
            "description": "URL of the recipe photo",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/photo.jpg"
          },
          "description": {
            "description": "Short description of the recipe",
            "type": "string",
            "example": "A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper.",
            "maxLength": 200
          },
          "ingredients": {
            "description": "List of ingredients required for the recipe. Note: swagger has garbage support for arrays, so if youre referencing this schema as request body, write it as one item like so: [{\"ingredient\": \"Potato\", \"quantity\": \"200g\"}, {\"ingredient\": \"Pickle\", \"quantity\": \"100g\"}]",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ingredientId": {
                  "description": "ID of the ingredient",
                  "type": "string",
                  "example": "65e4decdd286b30065d54af9"
                },
                "quantity": {
                  "description": "Quantity of the ingredient",
                  "type": "string",
                  "example": "200g"
                }
              }
            },
            "minItems": 2,
            "maxItems": 16
          },
          "instructions": {
            "type": "string",
            "description": "Step-by-step instructions to prepare the recipe",
            "example": "Cook spaghetti, mix with eggs and cheese, add bacon and pepper.",
            "maxLength": 1200
          },
          "categoryId": {
            "description": "ID of the category of the recipe ",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "cookingTime": {
            "description": "Estimated cooking time in minutes",
            "type": "integer",
            "example": 30,
            "minimum": 1,
            "maximum": 360
          },
          "foodEnergy": {
            "description": "Estimated food energy in kcal",
            "type": "number",
            "example": 600,
            "minimum": 1,
            "maximum": 10000
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the user",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "Email address of the user",
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "description": "Password for the user account",
            "type": "string",
            "format": "password",
            "example": "strongpassword123"
          },
          "favouriteRecipes": {
            "description": "List of IDs of the user's favourite recipes",
            "type": "array",
            "items": {
              "description": "ID of a favourite recipe",
              "type": "string",
              "example": "65e4decdd286b30065d54af9"
            }
          }
        }
      },
      "Ingredient": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "description": "Ingredient's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the category",
            "type": "string",
            "example": "Cabbage"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "description": "Category's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Name of the category",
            "type": "string",
            "example": "Main Course"
          },
          "title": {
            "type": "string",
            "example": "Breakfast"
          },
          "slug": {
            "type": "string",
            "example": "breakfast"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-20T10:11:12.000Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-08-20T10:11:12.000Z"
          }
        },
        "required": [
          "_id",
          "name",
          "title",
          "slug"
        ]
      },
      "Session": {
        "type": "object",
        "required": [
          "_id",
          "userId",
          "accessToken",
          "refreshToken",
          "accessTokenValidUntil",
          "refreshTokenValidUntil"
        ],
        "properties": {
          "_id": {
            "description": "Session's unique identifier",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "userId": {
            "description": "ID of the user associated with the session",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "accessToken": {
            "description": "JWT access token for the session",
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "refreshToken": {
            "description": "JWT refresh token for the session",
            "type": "string",
            "example": "d1f2e3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z"
          },
          "accessTokenValidUntil": {
            "description": "Timestamp when the access token expires",
            "type": "string",
            "format": "date-time",
            "example": "2023-10-01T12:00:00Z"
          },
          "refreshTokenValidUntil": {
            "description": "Timestamp when the refresh token expires",
            "type": "string",
            "format": "date-time",
            "example": "2023-12-01T12:00:00Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Resource not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "ConflictError."
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    }
  }
}